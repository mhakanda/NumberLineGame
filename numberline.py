##code generated by Mohammad H Akanda Dec 16,2017
##Final code by Mohammad H Akanda Jan 24, 2018
from psychopy import visual,event,core
from pyglet.window import key
import random, wx, datetime, sys, math,time,glob,os
from lib import promptNumberLine,NumberLine

BACKGROUND = '#ccc'
pause = 3
def printOutput(data, output):
    output.write(data['Left'] + ",")
    output.write("%0.0f," % data['NumL'])
    output.write("%0.0f," % data['DenL'])
    output.write("%0.3f," % data['RatioL'])

    output.write(data['Right'] + ",")
    output.write("%0.0f," % data['NumR'])
    output.write("%0.0f," % data['DenR'])
    output.write("%0.3f," % data['RatioR'])

    output.write(data['Center'] + ",")
    output.write("%0.0f," % data['NumC'])
    output.write("%0.0f," % data['DenC'])
    output.write("%0.3f," % data['RatioC'])

    if data['Clicked_Ratio'] == 'NA':
        output.write(data['Clicked_Ratio'] + ",")
    else:
        output.write("%0.3f," % data['Clicked_Ratio'])

    output.write("%0.3f," % data['Time_Played'])
    # output.write("%0.3f," % data['TimeOut'])
    if not data['TimeOut'] == 'Inf':
        output.write("%0.3f," % data['TimeOut'])
    else:
        output.write(data['TimeOut'] + ",")

    output.write(data['Participant#']+',')
    output.write(data['Session#']+',')
    output.write(data['Age']+',')
    output.write(data['Grade']+',')
    output.write(data['Date']+',')
    output.write(data['Time'] + ',')
    output.write(data['response'] + '\n')

def myparameters(stim,mycolor):
    if mycolor:
        num,den = '#FF7F00','#1F78B4'
    else:
        num, den = 'White', 'Black'
    if (stim.upper()=='LINE'):
        color = [num,den]
        parameter = [17,15,1]
    elif (stim.upper()=='CIRCLE'):
        color = [num,den]
        parameter = [8,1]
    elif (stim.upper()=='CYLINDER'):
        color = [num,den]
        #[Line width,isCenter]
        parameter = [40,1]
    elif (stim.upper()=='SYMBOL'):
        color = [num,'black',den]
        #[height of bottom or top(they are same), middle height of rectangle,nos.of character to fit]
        parameter = [100,9,3,1]
    elif (stim.upper()=='SYMBOL1'):
        color = [num,'black',den]
        #[height of bottom or top(they are same), middle height of rectangle,nos.of character to fit]
        parameter = [100,9,3,0]
    elif (stim.upper()=='ARRAY'):
        #color = [NDotColor,NBoxColor,NLineColor,DDotColor,DBoxColor,DLineColor]
        color = [num,den,den,den,num,num]
        #parameter = [isBoundingBox,sizeFactor = 1,spacingFactor = 0.6,sizingScheme = 3]
        parameter = [1,.9,0.6,3]
    return [color,parameter]
#----------------------
# # Let user enter file name
rn = 'user'+datetime.datetime.strftime(datetime.datetime.now(), '%m%d%Y%H%M%S')
ipt = wx.App(False)
WIDTH = wx.GetDisplaySize()[0]
HEIGHT = wx.GetDisplaySize()[1]
outBox = wx.TextEntryDialog(None, 'Enter output filename', 'Welcome', rn)
ansf = outBox.ShowModal()
if ansf == wx.ID_CANCEL:
    sys.exit()
if ansf == wx.ID_OK:
    outputName = str(outBox.GetValue()).strip()
outBox.Destroy()

exOutFile = glob.glob('results/*.csv')
exOutFile = [os.path.basename(f) for f in exOutFile]
while (outputName + '.csv' in exOutFile):
    wnbox = wx.TextEntryDialog(None, 'Enter output filename', 'File already exists', rn)
    answ = wnbox.ShowModal()
    if outputName == '':
        sys.exit()
    if answ == wx.ID_CANCEL:
        sys.exit()
    if answ == wx.ID_OK:
        outputName = str(wnbox.GetValue()).strip()
    wnbox.Destroy()

ipt.Destroy()
# General Prompt for more user information
ParticipantID = []
SessionNumber = []
ParticipantAge = []
ParticipantGrade = []
EventDate = []
InputFiles = []
CheckBoxesStates = {}

app = promptNumberLine.wx.App(False)
dlg = promptNumberLine.MyPrompt()
okPrompt = False
exitProgram = False
flag = True
while flag:
    retval = dlg.ShowModal()
    if retval == promptNumberLine.wx.ID_OK:
        #parse inputs
        ParticipantID    = dlg.ParticipantID
        SessionNumber    = dlg.SessionNumber
        ParticipantAge   = dlg.ParticipantAge
        ParticipantGrade = dlg.ParticipantGrade
        EventDate        = dlg.EventDate
        CheckBoxesStates = dlg.CheckBoxesStates
        InputFiles       = dlg.InputFiles
        # print type(dlg.TimeOut[0])
        if (dlg.TimeOut[0]):
            TimeOut= float(dlg.TimeOut[0])
        else:
            TimeOut= 0.0
        # print TimeOut
        inFileNames      = InputFiles[0].split(';')
        inFileNames      = filter(None, inFileNames)
        existInFiles = glob.glob('conditions/*.txt')
        existInFiles = [os.path.basename(f) for f in existInFiles]
        looping = False;
        for fname in inFileNames:
            s = fname.replace(".txt", '').strip()+'.txt'
            if s not in existInFiles:
                warn = wx.MessageDialog(None, 'Experiment file '+s+' does not exists, please check input folder.', 'Warning', wx.YES_NO)
                warnAnswer = warn.ShowModal()
                if warnAnswer == wx.ID_NO:
                    warn.Destroy()
                    flag = False
                    sys.exit()
                    break
                if warnAnswer == wx.ID_YES:
                    warn.Destroy()
                    flag = True
                    looping = True #flag to keep entering values into prompt
                    break
        if not looping:
            break
    #on cancel, close everything
    if retval == promptNumberLine.wx.ID_CANCEL:
        flag = False
        exitProgram = True
        dlg.closeProgram()
dlg.Destroy()
app.MainLoop()
if exitProgram:
    sys.exit()

output = open('results/%s.csv' % outputName, 'w')
dataH = ["Left,", 'NumL,', 'DenL,', 'RatioL,', 'Right,', 'NumR,', 'DenR,', 'RatioR,', 'Center,', 'NumC,', 'DenC,', 'RatioC,',
         'Clicked_Ratio,', 'Time_Played,', 'TimeOut,', 'Participant#,', 'Session#,', 'Age,', 'Grade,', 'Date,', 'Time,', 'Response\n']
for j in dataH:
    output.write(j)
#-----------------------
pt = datetime.datetime.strftime(datetime.datetime.now(), '%Y/%m/%d %H:%M:%S').split(' ')
# p = WIDTH*.999  # WIDTH
p = WIDTH
ww, hh = p, p * HEIGHT / float(WIDTH)
w = visual.Window(size=(ww, hh), color=BACKGROUND, monitor="testMonitor", units="pix")

pp = .99
w1, h1 = ww*pp,hh*pp
dim = (w1,h1)
#------------------
leftC = [-w1/3,-h1/6]
rightC = [w1/3,-h1/6]
centerC = [0,h1/6]
sliderC = [0,-h1/6]
sliderL = [-w1/6,-h1/6]
sliderR = [w1/6,-h1/6]

data1 = {}
if (TimeOut):
    data1['TimeOut'] = TimeOut
else:
    data1['TimeOut'] = 'Inf'
# print data
data1['Date'] = pt[0]
data1['Time'] = pt[1]
data1['Participant#'] = ParticipantID[0].strip()
data1['Session#'] = SessionNumber[0].strip()
data1['Age'] = ParticipantAge[0].strip()
data1['Grade'] = ParticipantGrade[0].strip()
data2 = data1
for inputF in filter(None, InputFiles[0].split(';')):
    inputF = inputF.replace(".txt", '').strip()+'.txt'
    exp = open('conditions/%s' % inputF, 'r')
    exp = list(exp)

    i = 0
    fLine = exp[0].split()
    if (fLine[0].upper() == 'REPEAT' and len(fLine) == 2):
        del exp[0]
        exp = int(fLine[1]) * exp
    elif (fLine[0].upper() == 'REPEAT' and len(fLine) == 3 and fLine[2].upper() == 'RANDOM'):
        del exp[0]
        con = [];
        i = 0;
        num = int(fLine[1])
        while (i <= len(exp) - 1):  # get distinct element
            if exp[i].split()[0].upper() == 'INSTRUCTION':
                con.append(list(exp[i:i + 1]))
                i = i + 1
            elif exp[i].split()[0].upper() == 'LEFT':
                # print i
                # gg = list(exp[i:i + 5])
                # print gg
                con.append(list(exp[i:i + 4]))
                i = i + 4
        ##print len(con)
        ind = []
        for j in xrange(num):
            ll = random.sample(xrange(len(con)), len(con))
            ind.append(ll)

        # print ind
        indm = [k for j in ind for k in j]  # flatten the index
        mid1 = [con[k] for k in indm]  # get real elements with list
        exp = [k for j in mid1 for k in j]  # flatten the list
    elif (fLine[0].upper() == 'REPEAT' and (len(fLine) > 3 or len(fLine) < 2)):
        print 'Correct Repeat statement'
    i = 0;
    while (i <= len(exp) - 1):
        Left = exp[i].split()
        print Left
        if Left[0].upper() == 'LEFT':
            data3= {}
            left, right, center = exp[i].split(), exp[i+1].split(), exp[i+2].split()
            data3['Left'], data3['Right'], data3['Center'] = left[1].upper(), right[1].upper(), center[1].upper()
            if (left[1].upper()=='SYMBOL') and (len(left)==3):
                left.append('1')
                left[1]='symbol1'
            if (right[1].upper()=='SYMBOL') and (len(right)==3):
                right.append('1')
                right[1] = 'symbol1'
            if (center[1].upper()=='SYMBOL') and (len(center)==3):
                center.append('1')
                center[1] = 'symbol1'
            leftS,rightS,centerS = left[1],right[1],center[1]
            (leftN,leftD) = (int(left[2]),int(left[3]))
            (rightN,rightD) = (int(right[2]),int(right[3]))
            (centerN,centerD) =(int(center[2]),int(center[3]))
            data3['NumL'], data3['DenL'] = leftN, leftD
            data3['NumR'], data3['DenR'] = rightN,rightD
            data3['NumC'], data3['DenC'] = centerN,centerD

            leftR = float(leftN)/leftD if left[1].upper()!= 'CIRCLE' else (float(leftN)/leftD)**2
            rightR = float(rightN)/rightD if right[1].upper()!= 'CIRCLE' else (float(rightN)/rightD)**2
            centerR = float(centerN)/centerD if center[1].upper()!= 'CIRCLE' else (float(centerN)/centerD)**2
            # print leftR,rightR,centerR
            # print left,right,center
            assert leftR<=centerR<=rightR,'Setting mistach'
            ratio = [leftR,rightR,centerR]
            data3['RatioL'],data3['RatioR'],data3['RatioC'] = leftR,rightR,centerR
            # print data1
            Feats = []
            Feats.append([leftS,leftN,leftD,leftC,myparameters(leftS,mycolor = CheckBoxesStates['color'])])
            Feats.append([rightS,rightN,rightD,rightC,myparameters(rightS,mycolor = CheckBoxesStates['color'])])
            Feats.append([centerS,centerN,centerD,centerC,myparameters(centerS,mycolor = CheckBoxesStates['color'])])
            if (exp[i + 3].split()[2].upper() == '1'):
                # First digit is for response, 2nd digit is for write (1) or audio (2)
                if (exp[i + 3].split()[1].upper() == 'WRITE'):
                    rponse = 11
                    s = exp[i + 3].split()[3:]
                    if len(s):
                        ss = ' '.join(str(e) for e in s)
                        s1 = ' '.join(ss.split())
                    else:
                        s1 = 'Please write your response.'
                    rHead = s1
                    # print s1,CheckBoxesStates
                elif (exp[i + 3].split()[1].upper() == 'AUDIO'):
                    rponse = 12
                    rHead = ''
            elif (exp[i + 3].split()[2].upper() == '0'):
                rponse = 0
                rHead =''
            response = [rponse,rHead]

            dataR = NumberLine.runNumberLine(w, Feats,ratio,dim,TimeOut,response)
            # print data1
            # print data
            dataR.update(data1)
            dataR.update(data3)
            # print data
            output = open('results/%s.csv' % outputName, 'a')
            printOutput(dataR, output)
            output.close()
            i=i+4
            del dataR,data3
        elif Left[0].upper() == 'INSTRUCTION':
            keyState = key.KeyStateHandler()
            w.winHandle.push_handlers(keyState)

            filee = 'lib/' + Left[1]
            img = visual.ImageStim(w, image=filee, units='pix')
            img.autoDraw = 1
            w.flip()
            stime = time.time()
            while True:
                if keyState[key.ENTER]:
                    dataI = {}
                    dataI['Left'], dataI['Right'], dataI['Center'] = 'INSTRUCTION','INSTRUCTION','INSTRUCTION'
                    dataI['NumL'], dataI['DenL'] = 0,0
                    dataI['NumR'], dataI['DenR'] = 0,0
                    dataI['NumC'], dataI['DenC'] = 0,0
                    dataI['RatioL'], dataI['RatioR'], dataI['RatioC'] = 0,0,0
                    dataI['Time_Played']= time.time() - stime
                    dataI['response'] =  ''
                    dataI['Clicked_Ratio']= 0
                    dataI.update(data1)
                    img.autoDraw = 0
                    break
                w.flip()
            print dataI
            output = open('results/%s.csv' % outputName, 'a')
            printOutput(dataI, output)
            output.close()
            i = i + 1
            del dataI
        else:
            print 'Spelling error'
            break
    del exp
w.close()
